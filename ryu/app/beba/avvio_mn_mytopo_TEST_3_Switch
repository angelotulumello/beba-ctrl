from mininet.net import Mininet
from mininet.topo import Topo,SingleSwitchTopo
from mininet.cli import CLI
from mininet.node import UserSwitch,RemoteController, OVSKernelSwitch
from mininet.term import makeTerm
import os, time, sys

#LOG = logging.getLogger('app.openstate.ingressegress')

"""Custom topology example

Two directly connected switches plus a host for each switch:

 
            Edge       Transport      Edge
host1 ---- switch1 ---- switch2 ---- switch6  ---- host2 

Adding the 'topos' dict with a key/value pair to generate our newly defined
topology enables one to pass in '--topo=mytopo' from the command line.
"""


class DataDrivenTopo( Topo ):
    "Simple topology example."

    def __init__( self, ovsk=False):
        "Create custom topo."

        # Initialize topology
        Topo.__init__( self )

        # Add hosts and switches
    #   Hosts for the first switch
        Host1 = self.addHost( 'h1', mac='00:00:00:00:00:01')


    #   Hosts for the second switch
        Host2 = self.addHost( 'h2', mac='00:00:00:00:00:02')



    #   Switches EDGE
        switch1 = self.addSwitch('s1')

    #   Switches TRANSPORT
        switch2 = self.addSwitch('s2')

    #   Switches EDGE
        switch6 = self.addSwitch('s6')


        # Add links
    #   hosts 1 and Switch 1
        self.addLink( Host1 , switch1 )
    #   hosts 2 and Switch 6
        self.addLink( Host2 , switch6 )

    #   Switch 1 and Switch 2
        self.addLink( switch1 , switch2 )

    #   Switch 2 and Switch 6
        self.addLink( switch2 , switch6 )



topos = { 'data_driven_topo': ( lambda: DataDrivenTopo() ) }

net = Mininet(topo=DataDrivenTopo(),switch=UserSwitch,controller=RemoteController,cleanup=True,autoSetMacs=True,autoStaticArp=True,listenPort=6634)
print 'Launching Mininet...'
net.start()

CLI(net)

net.stop()
#time.sleep(5)

"""print 'Launching Ryu...'
os.environ['B'] = str(Bucket_Size)
os.environ['R'] = str(Token_Rate)
os.system("ryu-manager os_evolution_TOKEN_BUCKET_auto.py &")
time.sleep(5)

h1 = net.hosts[0]

print 'Launching ping...'
result = h1.cmd('ping 10.0.0.2 -i '+str(I)+' -c '+str(T/I))
time.sleep(5)

os.system("sudo mn -c 2> /dev/null")
os.system("kill -9 $(pidof -x ryu-manager) 2> /dev/null")
"""
